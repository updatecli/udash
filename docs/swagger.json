{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/": {
            "get": {
                "description": "Landing page of the API",
                "tags": [
                    "Landing"
                ],
                "summary": "Landing page",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/ping": {
            "get": {
                "description": "Ping the API to check if it's running",
                "tags": [
                    "Ping"
                ],
                "summary": "Ping the API",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/pipeline/config/conditions": {
            "get": {
                "description": "List all configuration conditions from the database",
                "tags": [
                    "Configuration Conditions"
                ],
                "summary": "List all configuration conditions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the configuration condition",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Kind of the configuration condition",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Configuration of the condition",
                        "name": "config",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ConditionConfigResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a configuration condition from the database",
                "tags": [
                    "Configuration Conditions"
                ],
                "summary": "Delete a configuration condition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the configuration condition to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/pipeline/config/conditions/search": {
            "post": {
                "description": "Search for configuration conditions in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration Conditions"
                ],
                "summary": "Search configuration conditions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ConditionConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/pipeline/config/kinds": {
            "post": {
                "description": "Search for configuration by kind in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Search configuration by kind",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.ConfigKindResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/pipeline/config/sources": {
            "get": {
                "description": "List all configuration sources from the database",
                "tags": [
                    "Configuration Sources"
                ],
                "summary": "List all configuration sources",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the configuration source",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Kind of the configuration source",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Configuration of the source",
                        "name": "config",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SourceConfigResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a configuration source from the database",
                "tags": [
                    "Configuration Sources"
                ],
                "summary": "Delete a configuration source",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the configuration source to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/pipeline/config/sources/search": {
            "post": {
                "description": "Search for configuration sources in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration Sources"
                ],
                "summary": "Search configuration sources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SourceConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/pipeline/config/targets": {
            "get": {
                "description": "List all configuration targets from the database",
                "tags": [
                    "Configuration Targets"
                ],
                "summary": "List all target configurations.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the configuration target",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Kind of the configuration target",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Configuration of the target",
                        "name": "config",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.TargetConfigResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a configuration target from the database",
                "tags": [
                    "Configuration Targets"
                ],
                "summary": "Delete a configuration target",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the configuration target to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/pipeline/config/targets/search": {
            "post": {
                "description": "Search for configuration targets in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration Targets"
                ],
                "summary": "Search configuration targets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.TargetConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/pipeline/reports": {
            "get": {
                "description": "List all pipeline reports from the database",
                "tags": [
                    "Pipeline Reports"
                ],
                "summary": "List all pipeline reports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SCM ID",
                        "name": "scmid",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.GetPipelineReportsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new pipeline report in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipeline Reports"
                ],
                "summary": "Create a new pipeline report",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/server.CreatePipelineReportResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/pipeline/reports/search": {
            "post": {
                "description": "Search pipeline reports in the database using advanced filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipeline Reports"
                ],
                "summary": "Search pipeline reports",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.GetPipelineReportsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/pipeline/reports/{id}": {
            "get": {
                "description": "Get the latest pipeline report for a specific ID",
                "tags": [
                    "Pipeline Reports"
                ],
                "summary": "Get a pipeline report by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/server.GetPipelineReportByIDResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a pipeline report in the database. Please note that this endpoint is not supported yet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipeline Reports"
                ],
                "summary": "Update a pipeline report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a pipeline report from the database",
                "tags": [
                    "Pipeline Reports"
                ],
                "summary": "Delete a pipeline report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/scms": {
            "get": {
                "description": "List SCMs data from the database",
                "tags": [
                    "SCMs"
                ],
                "summary": "List SCMs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the SCM",
                        "name": "scmid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "URL of the SCM",
                        "name": "url",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Branch of the SCM",
                        "name": "branch",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Return a summary of the SCMs",
                        "name": "summary",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        },
        "/api/scms/summary": {
            "get": {
                "description": "Find SCM Summary of all git repositories detected",
                "tags": [
                    "SCMs"
                ],
                "summary": "Find SCM Summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the SCM",
                        "name": "scmid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "URL of the SCM",
                        "name": "url",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Branch of the SCM",
                        "name": "branch",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.FindSCMSummaryResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.DefaultResponseModel"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "condition.Config": {
            "type": "object",
            "properties": {
                "dependsOn": {
                    "description": "\"dependson\" allows to specify the order of execution of resources\nIt accepts a list of rules like \"(resourceType#)resourceId(:booleanOperator)\"\n\nThe resourceType is optional and can be one of \"condition\", \"source\" or \"target\"\nBy default the resourceType is the current resource type\n\nThe resourceId is the name of the resource to depend on\n\nThe booleanOperator is optional and can be \"AND\" or \"OR\"\n\nexamples:\ndependson:\n  - condition#myCondition:and\n  - source#mySource\n\nremarks:\n  The parameters \"sourceid\" and \"conditionsids\" affect the order of resource execution.\n  To avoid circular dependencies, the depended resource may need to remove any conditionids or set \"disablesourceinput to true\".",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deprecatedDependsOn": {
                    "description": "!deprecated, please use dependson",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deprecatedSCMID": {
                    "description": "!deprecated, please use scmid",
                    "type": "string"
                },
                "deprecatedSourceID": {
                    "description": "! Deprecated in favor of sourceID",
                    "type": "string"
                },
                "disableSourceInput": {
                    "description": "disablesourceinput disable the mechanism to retrieve a default value from a source.",
                    "type": "boolean"
                },
                "failWhen": {
                    "description": "FailWhen allows to reverse a condition expected result from true to false.",
                    "type": "boolean"
                },
                "kind": {
                    "description": "kind specifies the resource kind which defines accepted spec value",
                    "type": "string"
                },
                "name": {
                    "description": "name specifies the resource name",
                    "type": "string"
                },
                "scmid": {
                    "description": "scmid specifies the scm configuration key associated to the current resource",
                    "type": "string"
                },
                "sourceID": {
                    "description": "sourceid specifies which \"source\", based on its ID, is used to retrieve the default value.",
                    "type": "string"
                },
                "spec": {
                    "description": "spec specifies parameters for a specific resource kind"
                },
                "transformers": {
                    "description": "transformers defines how the default input value need to be transformed",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transformer.Transformer"
                    }
                }
            }
        },
        "database.SearchLatestReportData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt represents the creation date of the report.",
                    "type": "string"
                },
                "filteredResourceID": {
                    "description": "FilteredResourceID contains the resource config ID that was filtered\nIt allows to identify in the report which resource was used to filter the report.",
                    "type": "string"
                },
                "id": {
                    "description": "ID represents the unique identifier of the report.",
                    "type": "string"
                },
                "name": {
                    "description": "Name represents the name of the report.",
                    "type": "string"
                },
                "report": {
                    "description": "Report contains the report data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/reports.Report"
                        }
                    ]
                },
                "result": {
                    "description": "Result represents the result of the report.",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "UpdatedAt represents the last update date of the report.",
                    "type": "string"
                }
            }
        },
        "model.ConfigCondition": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/condition.Config"
                },
                "created_at": {
                    "description": "Created_at represent the creation date of the record.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier of the record in the database.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind represent the kind of the resource configuration.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Updated_at represent the last update date of the record.",
                    "type": "string"
                }
            }
        },
        "model.ConfigSource": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Config is the configuration of the source resource.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/source.Config"
                        }
                    ]
                },
                "created_at": {
                    "description": "Created_at represent the creation date of the record.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier of the record in the database.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind represent the kind of the resource configuration.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Updated_at represent the last update date of the record.",
                    "type": "string"
                }
            }
        },
        "model.ConfigTarget": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/target.Config"
                },
                "created_at": {
                    "description": "Created_at represent the creation date of the record.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier of the record in the database.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind represent the kind of the resource configuration.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Updated_at represent the last update date of the record.",
                    "type": "string"
                }
            }
        },
        "model.PipelineReport": {
            "type": "object",
            "properties": {
                "conditionConfigIDs": {
                    "description": "ConditionConfigIDs is a list of unique identifiers of the condition configuration associated with the database.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "description": "Create_at represent the creation date of the record.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier of the record in the database.",
                    "type": "string"
                },
                "pipeline": {
                    "description": "Pipeline represent the Updatecli pipeline report.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/reports.Report"
                        }
                    ]
                },
                "pipelineID": {
                    "description": "PipelineID represent the ID of the pipeline executed by Updatecli.\ndifferent execution of the same pipeline will have the same PipelineID.\nThis value is coming from the pipeline report to improve the search of reports.",
                    "type": "string"
                },
                "sourceConfigIDs": {
                    "description": "SourceConfigIDs is a list of unique identifiers of the source configuration associated with the database.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "targetConfigIDs": {
                    "description": "TargetConfigIDs is a list of unique identifiers of the target configuration associated with the database.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "targetScmIDs": {
                    "description": "TargetScmIDs is a list of unique identifiers of the scm configuration associated with the database.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "description": "Updated_at represent the last update date of the record.",
                    "type": "string"
                }
            }
        },
        "reports.Action": {
            "type": "object",
            "properties": {
                "actionUrl": {
                    "description": "Link is the URL of the action",
                    "type": "string"
                },
                "description": {
                    "description": "Description is the description of the action",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier of the action",
                    "type": "string"
                },
                "pipelineTitle": {
                    "description": "PipelineTitle is the title of the pipeline",
                    "type": "string"
                },
                "pipelineURL": {
                    "description": "using a pointer to avoid empty tag",
                    "allOf": [
                        {
                            "$ref": "#/definitions/reports.PipelineURL"
                        }
                    ]
                },
                "targets": {
                    "description": "Targets is the list of targets IDs associated with the action",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.ActionTarget"
                    }
                },
                "title": {
                    "description": "Title is the title of the action",
                    "type": "string"
                }
            }
        },
        "reports.ActionTarget": {
            "type": "object",
            "properties": {
                "changelogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.ActionTargetChangelog"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "reports.ActionTargetChangelog": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the description of the changelog",
                    "type": "string"
                },
                "title": {
                    "description": "Title is the title of the changelog",
                    "type": "string"
                }
            }
        },
        "reports.PipelineURL": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the pipeline",
                    "type": "string"
                },
                "url": {
                    "description": "URL is the URL of the pipeline",
                    "type": "string"
                }
            }
        },
        "reports.Report": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/reports.Action"
                    }
                },
                "conditions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/result.Condition"
                    }
                },
                "err": {
                    "type": "string"
                },
                "id": {
                    "description": "ID defines the report ID",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pipelineID": {
                    "description": "PipelineID represents the Updatecli manifest pipelineID",
                    "type": "string"
                },
                "reportURL": {
                    "type": "string"
                },
                "result": {
                    "type": "string"
                },
                "sources": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/result.Source"
                    }
                },
                "targets": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/result.Target"
                    }
                }
            }
        },
        "result.Changelog": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Body represents the body of the changelog.",
                    "type": "string"
                },
                "publishedAt": {
                    "description": "PublishedAt represents the date the changelog was published.",
                    "type": "string"
                },
                "title": {
                    "description": "Title represents the title of the changelog. Typically a version number.",
                    "type": "string"
                },
                "url": {
                    "description": "URL represents the URL to the changelog.",
                    "type": "string"
                }
            }
        },
        "result.Condition": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Config stores the source configuration"
                },
                "consoleOutput": {
                    "description": "ConsoleOutput stores the console output of the condition execution",
                    "type": "string"
                },
                "description": {
                    "description": "Description stores the condition execution description.",
                    "type": "string"
                },
                "id": {
                    "description": "ID contains a uniq identifier for the condition",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the condition name",
                    "type": "string"
                },
                "pass": {
                    "description": "Pass stores the information detected by the condition execution.",
                    "type": "boolean"
                },
                "result": {
                    "description": "Result holds the condition result, accepted values must be one:\n\t\t\t* \"SUCCESS\"\n\t\t\t* \"FAILURE\"\n\t\t\t* \"ATTENTION\"\n\t\t\t* \"SKIPPED\"",
                    "type": "string"
                },
                "scm": {
                    "description": "Scm stores scm information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/result.SCM"
                        }
                    ]
                },
                "sourceID": {
                    "description": "SourceID stores the source ID used by the condition",
                    "type": "string"
                }
            }
        },
        "result.GitBranch": {
            "type": "object",
            "properties": {
                "source": {
                    "description": "Source defines the branch used as a source",
                    "type": "string"
                },
                "target": {
                    "description": "Target defines the branch used by Updatecli to apply the changes done from the working branch",
                    "type": "string"
                },
                "working": {
                    "description": "Working defines the working branch used by Updatecli",
                    "type": "string"
                }
            }
        },
        "result.SCM": {
            "type": "object",
            "properties": {
                "branch": {
                    "description": "Branch defines the different branches used by Updatecli",
                    "allOf": [
                        {
                            "$ref": "#/definitions/result.GitBranch"
                        }
                    ]
                },
                "branchReset": {
                    "description": "BranchReset defines if the scm branch was reset to the base branch during the pipeline execution",
                    "type": "boolean"
                },
                "id": {
                    "description": "ID contains a uniq identifier for the scm",
                    "type": "string"
                },
                "url": {
                    "description": "URL defines the git URL",
                    "type": "string"
                }
            }
        },
        "result.Source": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Config stores the source configuration"
                },
                "consoleOutput": {
                    "description": "ConsoleOutput stores the console output of the source execution",
                    "type": "string"
                },
                "description": {
                    "description": "Description stores the source execution description",
                    "type": "string"
                },
                "id": {
                    "description": "ID contains a uniq identifier for the source",
                    "type": "string"
                },
                "information": {
                    "description": "Information stores the information detected by the source execution such as a version",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the source name",
                    "type": "string"
                },
                "result": {
                    "description": "Result holds the source result, accepted values must be one:\n\t\t\t* \"SUCCESS\"\n\t\t\t* \"FAILURE\"\n\t\t\t* \"ATTENTION\"\n\t\t\t* \"SKIPPED\"",
                    "type": "string"
                },
                "scm": {
                    "description": "Scm stores scm information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/result.SCM"
                        }
                    ]
                }
            }
        },
        "result.Target": {
            "type": "object",
            "properties": {
                "changed": {
                    "description": "Changed specifies if the target was modify during the pipeline execution",
                    "type": "boolean"
                },
                "changelogs": {
                    "description": "Changelogs holds the changelog description",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/result.Changelog"
                    }
                },
                "config": {
                    "description": "Config stores the source configuration"
                },
                "consoleOutput": {
                    "description": "ConsoleOutput stores the console output of the target execution",
                    "type": "string"
                },
                "description": {
                    "description": "Description stores the target execution description",
                    "type": "string"
                },
                "dryRun": {
                    "description": "DryRun defines if a target was executed in DryRun mode",
                    "type": "boolean"
                },
                "files": {
                    "description": "Files holds the list of files modified by a target execution",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "ID contains a uniq identifier for the target",
                    "type": "string"
                },
                "information": {
                    "description": "Information stores the old information detected by the target execution",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the target name",
                    "type": "string"
                },
                "newInformation": {
                    "description": "NewInformation stores the new information updated by during the target execution",
                    "type": "string"
                },
                "result": {
                    "description": "Result holds the target result, accepted values must be one:\n\t\t\t* \"SUCCESS\"\n\t\t\t* \"FAILURE\"\n\t\t\t* \"ATTENTION\"\n\t\t\t* \"SKIPPED\"",
                    "type": "string"
                },
                "scm": {
                    "description": "Scm stores scm information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/result.SCM"
                        }
                    ]
                },
                "sourceID": {
                    "description": "SourceID stores the source ID used by the target",
                    "type": "string"
                }
            }
        },
        "server.AboutResponseModel": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "object",
                    "properties": {
                        "api": {
                            "type": "string"
                        },
                        "buildTime": {
                            "type": "string"
                        },
                        "golang": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "server.ConditionConfigResponse": {
            "type": "object",
            "properties": {
                "configs": {
                    "description": "Configs is a list of configuration conditions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ConfigCondition"
                    }
                }
            }
        },
        "server.ConfigKindResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "server.CreatePipelineReportResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "reportid": {
                    "type": "string"
                }
            }
        },
        "server.DefaultResponseModel": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "server.FindSCMSummaryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/server.ScmBranchData"
                    }
                }
            }
        },
        "server.GetPipelineReportByIDResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.PipelineReport"
                },
                "latestReportByID": {
                    "$ref": "#/definitions/model.PipelineReport"
                },
                "message": {
                    "type": "string"
                },
                "nbReportsByID": {
                    "type": "integer"
                }
            }
        },
        "server.GetPipelineReportsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.SearchLatestReportData"
                    }
                }
            }
        },
        "server.ScmBranchData": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/server.ScmSummaryData"
            }
        },
        "server.ScmSummaryData": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the unique identifier of the SCM.",
                    "type": "string"
                },
                "total_result": {
                    "description": "TotalResult is the total number of results for this SCM.",
                    "type": "integer"
                },
                "total_result_by_type": {
                    "description": "TotalResultByType is a map of result types and their counts.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            }
        },
        "server.SourceConfigResponse": {
            "type": "object",
            "properties": {
                "configs": {
                    "description": "Configs is a list of configuration sources.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ConfigSource"
                    }
                }
            }
        },
        "server.TargetConfigResponse": {
            "type": "object",
            "properties": {
                "configs": {
                    "description": "Configs is a list of configuration targets.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ConfigTarget"
                    }
                }
            }
        },
        "source.Config": {
            "type": "object",
            "properties": {
                "dependsOn": {
                    "description": "\"dependson\" allows to specify the order of execution of resources\nIt accepts a list of rules like \"(resourceType#)resourceId(:booleanOperator)\"\n\nThe resourceType is optional and can be one of \"condition\", \"source\" or \"target\"\nBy default the resourceType is the current resource type\n\nThe resourceId is the name of the resource to depend on\n\nThe booleanOperator is optional and can be \"AND\" or \"OR\"\n\nexamples:\ndependson:\n  - condition#myCondition:and\n  - source#mySource\n\nremarks:\n  The parameters \"sourceid\" and \"conditionsids\" affect the order of resource execution.\n  To avoid circular dependencies, the depended resource may need to remove any conditionids or set \"disablesourceinput to true\".",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deprecatedDependsOn": {
                    "description": "!deprecated, please use dependson",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deprecatedSCMID": {
                    "description": "!deprecated, please use scmid",
                    "type": "string"
                },
                "kind": {
                    "description": "kind specifies the resource kind which defines accepted spec value",
                    "type": "string"
                },
                "name": {
                    "description": "name specifies the resource name",
                    "type": "string"
                },
                "scmid": {
                    "description": "scmid specifies the scm configuration key associated to the current resource",
                    "type": "string"
                },
                "spec": {
                    "description": "spec specifies parameters for a specific resource kind"
                },
                "transformers": {
                    "description": "transformers defines how the default input value need to be transformed",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transformer.Transformer"
                    }
                }
            }
        },
        "target.Config": {
            "type": "object",
            "properties": {
                "dependsOn": {
                    "description": "\"dependson\" allows to specify the order of execution of resources\nIt accepts a list of rules like \"(resourceType#)resourceId(:booleanOperator)\"\n\nThe resourceType is optional and can be one of \"condition\", \"source\" or \"target\"\nBy default the resourceType is the current resource type\n\nThe resourceId is the name of the resource to depend on\n\nThe booleanOperator is optional and can be \"AND\" or \"OR\"\n\nexamples:\ndependson:\n  - condition#myCondition:and\n  - source#mySource\n\nremarks:\n  The parameters \"sourceid\" and \"conditionsids\" affect the order of resource execution.\n  To avoid circular dependencies, the depended resource may need to remove any conditionids or set \"disablesourceinput to true\".",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dependsOnChange": {
                    "description": "dependsonchange enables the mechanism to check if the dependant target(s) have made a change.\nIf the dependant target(s) have not made a change the target will be skipped.\n\ndefault:\n  false",
                    "type": "boolean"
                },
                "deprecatedConditionIDs": {
                    "description": "! Deprecated - please use DependsOn with `condition#conditionid` keys\n\nconditionids specifies the list of conditions to be evaluated before running the target.\nif at least one condition is not met, the target will be skipped.\n\ndefault:\n  by default, all conditions are evaluated.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deprecatedDependsOn": {
                    "description": "!deprecated, please use dependson",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deprecatedSCMID": {
                    "description": "!deprecated, please use scmid",
                    "type": "string"
                },
                "deprecatedSourceID": {
                    "description": "! Deprecated - please use all lowercase `sourceid`",
                    "type": "string"
                },
                "disableConditions": {
                    "description": "disableconditions disables the mechanism to evaluate all conditions before running the target.\n\ndefault:\n  false\n\nremark:\n It's possible to only monitor specific conditions by setting disableconditions to true\n and using DependsOn with `condition#conditionid` keys",
                    "type": "boolean"
                },
                "disableSourceInput": {
                    "description": "disablesourceinput disables the mechanism to retrieve a default value from a source.\nFor example, if true, source information like changelog will not be accessible for a github/pullrequest action.\n\ndefault:\n false",
                    "type": "boolean"
                },
                "kind": {
                    "description": "kind specifies the resource kind which defines accepted spec value",
                    "type": "string"
                },
                "name": {
                    "description": "name specifies the resource name",
                    "type": "string"
                },
                "scmid": {
                    "description": "scmid specifies the scm configuration key associated to the current resource",
                    "type": "string"
                },
                "sourceID": {
                    "description": "sourceid specifies where retrieving the default value.\n\ndefault:\n  if only one source is defined, then sourceid is set to that sourceid.",
                    "type": "string"
                },
                "spec": {
                    "description": "spec specifies parameters for a specific resource kind"
                },
                "transformers": {
                    "description": "transformers defines how the default input value need to be transformed",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transformer.Transformer"
                    }
                }
            }
        },
        "transformer.FindSubMatch": {
            "type": "object",
            "properties": {
                "captureIndex": {
                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`.",
                    "type": "integer"
                },
                "deprecatedCaptureIndex": {
                    "type": "integer"
                },
                "pattern": {
                    "description": "Pattern defines regular expression to use for retrieving a submatch",
                    "type": "string"
                }
            }
        },
        "transformer.Replacer": {
            "type": "object",
            "properties": {
                "from": {
                    "description": "From defines the source value which need to be replaced",
                    "type": "string"
                },
                "to": {
                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced",
                    "type": "string"
                }
            }
        },
        "transformer.Transformer": {
            "type": "object",
            "properties": {
                "addPrefix": {
                    "description": "AddPrefix adds a prefix to the transformer input value",
                    "type": "string"
                },
                "addSuffix": {
                    "description": "AddSuffix adds a suffix to the transformer input value",
                    "type": "string"
                },
                "deprecatedAddPrefix": {
                    "type": "string"
                },
                "deprecatedAddSuffix": {
                    "type": "string"
                },
                "deprecatedFindSubMatch": {},
                "deprecatedSemVerInc": {
                    "type": "string"
                },
                "deprecatedTrimPrefix": {
                    "type": "string"
                },
                "deprecatedTrimSuffix": {
                    "type": "string"
                },
                "find": {
                    "description": "Find searches for a specific value if it exists and return false if it doesn't",
                    "type": "string"
                },
                "findSubMatch": {
                    "description": "Find searches for a specific value if it exists then return the value using regular expression",
                    "allOf": [
                        {
                            "$ref": "#/definitions/transformer.FindSubMatch"
                        }
                    ]
                },
                "quote": {
                    "description": "Quote add quote around the value",
                    "type": "boolean"
                },
                "replacer": {
                    "description": "Replacer specifies what value needs to be changed and how",
                    "allOf": [
                        {
                            "$ref": "#/definitions/transformer.Replacer"
                        }
                    ]
                },
                "replacers": {
                    "description": "Replacers specifies a list of replacer instruction",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transformer.Replacer"
                    }
                },
                "semVerInc": {
                    "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded.",
                    "type": "string"
                },
                "trimPrefix": {
                    "description": "TrimPrefix removes a prefix to the transformer input value",
                    "type": "string"
                },
                "trimSuffix": {
                    "description": "TrimSuffix removes the suffix from the transformer input value",
                    "type": "string"
                },
                "unquote": {
                    "description": "Unquote remove quotes around the value",
                    "type": "boolean"
                }
            }
        }
    }
}